/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
    implementation 'com.sun.xml.ws:jaxws-rt:4.0.1' // JAX-WS runtime for Java 21

    // Add database driver
    implementation 'org.postgresql:postgresql:42.6.0'

    // Add sql builder
    implementation 'org.jdbi:jdbi3-core:3.39.0'
    implementation 'org.jdbi:jdbi3-sqlobject:3.39.0'

    // I really do not want to generated getters and setters
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Manage env
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
